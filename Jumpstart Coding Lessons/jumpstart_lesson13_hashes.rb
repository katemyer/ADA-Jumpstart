# Create a hash.
first_hash = {}

# Add one key-value pair in the hash. The key should be :random_numbers. The value should be an array of five randomly generated integers between 12 and 21, both inclusive.
random_numbers_array = []
#start a while loop to loop through generating 5 random numbers between 12 and 21
i = 0
while i < 5
  random_numbers_array.push(rand(12..21))
  i += 1
end

#assigning random_numbers_array to the hash
puts "Random numbers #{first_hash[:random_numbers] = random_numbers_array}"

# Create another key-value pair in the hash. The key should be :user_input. The value should be an array of five positive integers that the program receives as user input, also in the range of 12 and 21, both inclusive.

user_input_array = []

# i = 0
# while i < 5 
#   puts "Enter a number between 12 and 21"
#   user_input = gets.chomp.to_i
#     if (user_input >= 12) && (user_input <= 21)
#       user_input_array.push(user_input)
#     else #everything else, inputs outside our range
#       puts "Enter a valid number" 
#       user_input = gets.chomp.to_i
#         while (user_input == nil) || (user_input < 12) || (user_input > 21)
#           puts "Try again"
#           user_input = gets.chomp.to_i
#         end
#       user_input_array.push(user_input)
#     end
#   i += 1
# end


i = 0
while i < 5
  puts "Enter a number between 12 and 21"
  user_input = gets.chomp.to_i
    while (user_input == nil) || (user_input < 12) || (user_input > 21)
      puts "Try again"
      user_input = gets.chomp.to_i
    end
    user_input_array.push(user_input)
  i += 1
end

puts "Here are your numbers: #{user_input_array}"

# Create a second hash.

second_hash = {}

# The keys in this hash are the numbers, either entered by the user or generated randomly by the program.
# The value holds information of:
# the count of times that the number in key was generated randomly by the program.
# the count of times that the number in key was provided by the user. Hint: it may be useful to consider having the value be another hash.
# Do the following two different ways: first only leveraging the information in the first hash, and then by only leveraging the information in the second hash.

# key = random_numbers_array or user_input_array
# value = random count AND user count

#RANDOM VALUES
random_numbers_array.each do |aNumber|
  if second_hash[aNumber] == nil #does the key which is the number from array exist in this new hash, if not, then assignment starts below. 
    second_hash[aNumber] =  {
      :random_count => 1, #:key random_count assigned to 1
      :user_count  => 0  #:key user_count assigned to 0
    }
  else # aNumber exists in hash
    second_hash[aNumber][:random_count] += 1
  end
end

#USER input
user_input_array.each do |aNumber|
  if second_hash[aNumber] == nil #does the key which is the number from array exist in this new hash, if not, then assignment starts below. 
    second_hash[aNumber] =  {
      :random_count => 0, #:key random_count assigned to 0
      :user_count  => 1  #:key user_count assigned to 1
    }
  else # aNumber exists in hash
    second_hash[aNumber][:user_count] += 1
  end
end

puts second_hash
puts ""
# Ask the user to supply three numbers.

puts "Give me 3 more numbers"
three_number_array = []

i = 0
while i < 3
  print "Enter a number"
  user_input = gets.chomp.to_i
  if second_hash[user_input] == nil #does not exist
    puts "Number #{user_input} has a random count => 0 and user count => 0"
  else 
    puts "Number #{user_input} has a random count => #{second_hash[user_input][:random_count]} and user count => #{second_hash[user_input][:user_count]}"
  end

  three_number_array.push(user_input)
  i += 1
end

puts "Here are your numbers #{three_number_array}"

# For each number entered by the user, share the count of times the number was generated by the program. RANDOM
# For each number entered by the user, share the count of times the number was provided earlier by the user. USER


three_number_array.each do |aNumber|
  if second_hash[aNumber] == nil #does not exist
    puts "Number #{aNumber} has a random count => 0 and user count => 0"
  else 
    puts "Number #{aNumber} has a random count => #{second_hash[aNumber][:random_count]} and user count => #{second_hash[aNumber][:user_count]}"
  end
end